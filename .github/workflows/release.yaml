name: Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for which to update the web app"
        required: true

env:
  # update with the name of the main binary
  binary: 'Dicey Dungeons'


jobs:

  # Build for wasm
  release-wasm:
    runs-on: ubuntu-latest

    steps:
      # If running manually, get tag from user input
      - uses: little-core-labs/get-git-tag@v3.0.1
        if: ${{ github.event.inputs.tag == '' }}
        id: get_version

      # If no tag given, use existing environment variable
      - uses: actions/checkout@v2
        if: ${{ github.event.inputs.tag == '' }}
      # Otherwise, use user input
      - uses: actions/checkout@v2
        if: ${{ github.event.inputs.tag != '' }}
        with:
          ref: ${{ github.event.inputs.tag }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli

      - name: Build
        run: |
          cargo build --release --target wasm32-unknown-unknown
          wasm-bindgen --no-typescript --out-name ${{ env.binary }} --out-dir . --target web target/wasm32-unknown-unknown/release/*.wasm

      - name: Set up Git environment
        run: |
          git fetch
          git branch gh-page origin/gh-page
          git checkout gh-page
          git checkout origin/master -- assets/
          git reset
          git add assets/ *.js *.wasm
          git config user.name 'GitHub Workflow'
          git config user.email 'https://github.com/Arc676/Dicey-Dungeons/issues'

      - name: Update game
        if: ${{ github.event.inputs.tag == '' }}
        run: |
          git commit -m "Update WASM to $GIT_TAG_NAME"
          git push -u origin gh-page

      - name: Update game
        if: ${{ github.event.inputs.tag != '' }}
        env:
          GIT_TAG_NAME: ${{ github.event.inputs.tag }}
        run: |
          git commit -m "Update WASM to $GIT_TAG_NAME"
          git push -u origin gh-page

  # Build for Linux
  release-linux:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.tag == '' }}

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r assets linux/
      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: linux
          dest: ${{ env.binary }}.zip

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-linux-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Windows
  release-windows:
    runs-on: windows-latest
    if: ${{ github.event.inputs.tag == '' }}

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          override: true

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          cp -r assets windows/
      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: windows
          dest: ${{ env.binary }}.zip

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-windows-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for macOS
  release-macos:
    runs-on: macOS-latest
    if: ${{ github.event.inputs.tag == '' }}

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          override: true
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}.dmg

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.dmg
          asset_name: ${{ env.binary }}-macos-${{ steps.get_version.outputs.tag }}.dmg
          tag: ${{ github.ref }}
          overwrite: true
